
===================== Lab notebook for 'emacs' assignment =====================

(1) Building & Programming Environment Setup

    First I built the emacs program with

      $ make

    Then for testing out interactive emacs I created the file 'num-search.el'
    with the function 'multiply-by-seven'

      (defun multiply-by-seven (number)
        "Multiply NUMBER by seven."
        (interactive "p")
        (message "The result is: %d" (* 7 number)))

    Then I tested this function out with

      $ src/emacs &
      $ (emacs) M-x load-file
      $ (emacs) num-search.el RET
      $ (emacs) M-5 M-x multiply-by-seven RET

        The result is: 35

    This shows that my test has worked out nicely
    Next I changed the interactive line to

      (interactive "nEnter the number to multiply by seven: ")

    Now emacs will use a minibuffer for the interaction, which will be easier
    for the user to use now that we do not need to enter a prefix

      $ src/emacs &
      $ (emacs) num-search.el RET
      $ (emacs) M-x multiply-by-seven RET

        Enter the number to multiply by seven: 10 RET
        The result is: 70

    Now this test has also worked out nicely

(2) Testing with ERT

    Define function with interactive prompts

      (defun num-search-forward (NUM1 &optional NUM2 BASE)
        "Search for NUM1, or range [NUM1, NUM2], in base BASE (default 10)"
        (interactive "nNumber to search for: \nnUpper bound for range search: \nnNumber base [2-16]: "))

    This has 3 interactive prompts with NUM1, NUM2, and BASE
    However this may not be useful for our testing since I haven't figured out
    how to use &optional interactive prompts. I will start testing out ERT.
    To use ERT to run all tests, I created a file 'num-search-tests.el' and ran

      $ src/emacs -batch -l ert -l num-search.el -l num-search-tests.el -f
        ert-run-tests-batch

    I put the tests in 'num-search-tests.el', one example:

      (ert-deftest num-search-forward-test-1-1 ()
        (with-temp-buffer
          (insert "Hello57 world!575")
          (beginning-of-buffer)
          (num-search-forward 57)
          (should (= (point) 8))))

(3) Actual Coding for 'num-search-forward'

    (a) where only NUM1 is defined

        I first implemented the part with only NUM1 defined (NUM2 & BASE are
        nil). For this to work, I translated the number to a regular expression
        and ran the builtin function 're-search-forward'. The regex is of the
        form '[^0-9]*+?0*NUM1[^0-9]+' or '[^0-9]*-0*NUM1[^0-9]+' if NUM1 is
        negative. Since this includes the trailing non-digit characters, we
        record the last digit of NUM1 and run the builtin function 're-search-
        backward' on the last digit of NUM1. After that we move the cursor
        forward by 1 character using the builtin function 'forward-char'. This
        implementation passed my self-defined tests.

        EDIT: Instead of running 're-search-forward' then running 're-search-
        backward', I will modify the regex to match only 1 trailing character,
        then after 're-search-forward', I will simply move the cursor back one
        character. This is easier to implement and faster and most of all, it
        does not compromise correctness.

        EDIT: We need different pattern matchings for when the cursor is at
        position 1 and other positions. When the cursor is at position 1 or
        the start of the buffer, we should use the pattern '^+?0*NUM1[^0-9]+'
        if NUM1 is positive and '^-0*NUM1[^0-9]+' if NUM1 is negative. This
        passes the tests given.

    (b) where BASE is defined

        Next I implemented the part where we define a number base BASE for the
        search by first specifying the character sets for each number base
        with a function 'inverse-character-set-for-base'. This takes 1
        argument and returns a string in regex format of the inverse character
        set of the given BASE.

        Next I used this function to generate the full regex for NUM1 with
        BASE defined. E.g. for NUM1 = 255, BASE = 16, the regex generated is
        "[^0-9A-Fa-f]*+?0*FF[^0-9A-Fa-f]+".

        Last, we will use the algorithm in part (a) and the regex generated to
        implement the search.

    (c) where NUM2 is defined

        Next I implemented the part where NUM2 is defined, which specifies a
        range search in [NUM1, NUM2] (in number base BASE if defined).
