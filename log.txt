
===================== Lab notebook for 'emacs' assignment =====================

(1) Building & Programming Environment Setup

		First I built the emacs program with

		  $ make

		Then for testing out interactive emacs I created the file 'num-search.el'
		with the function 'multiply-by-seven'

		  (defun multiply-by-seven (number)
				"Multiply NUMBER by seven."
				(interactive "p")
				(message "The result is: %d" (* 7 number)))

		Then I tested this function out with

		  $ src/emacs &
		  $ (emacs) M-x load-file
		  $ (emacs) num-search.el RET
		  $ (emacs) M-5 M-x multiply-by-seven RET

		    The result is: 35

		This shows that my test has worked out nicely
		Next I changed the interactive line to

		  (interactive "nEnter the number to multiply by seven: ")

		Now emacs will use a minibuffer for the interaction, which will be easier
		for the user to use now that we do not need to enter a prefix

		  $ src/emacs &
		  $ (emacs) num-search.el RET
		  $ (emacs) M-x multiply-by-seven RET

		    Enter the number to multiply by seven: 10 RET
		    The result is: 70

		Now this test has also worked out nicely

(2) Actual Coding For 'num-search-forward'

    Define function with interactive prompts

			(defun num-search-forward (NUM1 &optional NUM2 BASE)
			  "Search for NUM1, or range [NUM1, NUM2], in base BASE (default 10)"
			  (interactive "nNumber to search for: \nnUpper bound for range search: \nnNumber base [2-16]: "))

    This has 3 interactive prompts with NUM1, NUM2, and BASE
    However this may not be useful for our testing since I haven't figured out
    how to use &optional interactive prompts. I will start testing out ERT.
